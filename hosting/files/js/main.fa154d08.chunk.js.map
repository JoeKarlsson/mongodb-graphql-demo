{"version":3,"sources":["assets/plus.svg","assets/close.svg","config.js","stitch/app.js","stitch/authentication.js","stitch/StitchAuth.js","serviceWorker.js","components/Post.js","components/ListPage.js","components/Loading.js","components/ListPageContainer.js","constants/modalStyle.js","components/CreatePage.js","components/CreatePageContainer.js","components/DetailPage.js","components/DetailPageContainer.js","stitch/graphql.js","components/App.js","index.js"],"names":["module","exports","CONFIG","APP_ID","app","Stitch","hasAppClient","getAppClient","initializeAppClient","baseUrl","loginAnonymous","credential","AnonymousCredential","auth","loginWithCredential","then","user","console","log","id","catch","error","hasLoggedInUser","isLoggedIn","getCurrentUser","logoutCurrentUser","logoutUserWithId","StitchAuthContext","React","createContext","useStitchAuth","context","useContext","Error","Boolean","window","location","hostname","match","Post","className","to","this","props","post","_id","style","backgroundImage","imageUrl","backgroundSize","backgroundPosition","paddingBottom","description","Component","ListPage","actions","handleLogout","handleAnonymousLogin","blurClass","pathname","maxWidth","onClick","src","require","alt","instaposts","map","key","refresh","refetch","children","Loading","FIND_ALL_INSTAPOSTS","gql","ListPageContainer","useQuery","pollInterval","loading","data","modalStyle","overlay","zIndex","backgroundColor","display","alignItems","justifyContent","content","position","width","height","top","left","right","bottom","borderRadius","padding","border","background","boxShadow","ADD_INSTAPOST","withRouter","value","useMutation","addPost","isOpen","contentLabel","ariaHideApp","onRequestClose","history","goBack","onSubmit","e","preventDefault","variables","replace","ref","url","placeholder","autoFocus","str","type","CreatePageContainer","detailModalStyle","DELETE_INSTAPOST","deletePost","instapost","DetailPageContainer","params","initGraphQLClient","accessToken","activeUserAuthInfo","authLink","setContext","_","headers","Authorization","GRAPHQL_URL","httpLink","HttpLink","uri","ApolloClient","link","concat","cache","InMemoryCache","Login","InstaPostApp","client","exact","path","component","DetailPage","CreatePage","App","ReactDOM","render","useState","currentUser","authState","setAuthState","a","async","loggedInUser","authInfo","useMemo","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa154d08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus.e50b7210.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.ff987521.svg\";","const CONFIG = {\n\tAPP_ID: 'graphql-demo-lrpvu',\n};\n\nexport default CONFIG;\n","import { Stitch } from 'mongodb-stitch-browser-sdk';\nimport CONFIG from '../config.js';\n\nconst { APP_ID } = CONFIG;\n\nconst app = Stitch.hasAppClient(APP_ID)\n\t? Stitch.getAppClient(APP_ID)\n\t: Stitch.initializeAppClient(APP_ID, {\n\t\t\tbaseUrl: 'https://stitch.mongodb.com',\n\t  });\n\nexport { app };\n","import { AnonymousCredential } from 'mongodb-stitch-browser-sdk';\nimport { app } from './app.js';\n\nexport function loginAnonymous() {\n\t// Allow users to log in anonymously\n\tconst credential = new AnonymousCredential();\n\treturn app.auth\n\t\t.loginWithCredential(credential)\n\t\t.then(user => {\n\t\t\tconsole.log(`Logged in as anonymous user with id: ${user.id}`);\n\t\t\treturn user;\n\t\t})\n\t\t.catch(console.error);\n}\n\nexport function hasLoggedInUser() {\n\t// Check if there is currently a logged in user\n\treturn app.auth.isLoggedIn;\n}\n\nexport function getCurrentUser() {\n\t// Return the user object of the currently logged in user\n\treturn app.auth.isLoggedIn ? app.auth.user : null;\n}\n\nexport function logoutCurrentUser() {\n\t// Logout the currently logged in user\n\tconst user = getCurrentUser();\n\treturn app.auth.logoutUserWithId(user.id);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n\thasLoggedInUser,\n\tloginAnonymous,\n\tlogoutCurrentUser,\n\tgetCurrentUser,\n} from './authentication';\n\n// Create a React Context that lets us expose and access auth state\n// without passing props through many levels of the component tree\nconst StitchAuthContext = React.createContext();\n\n// Create a React Hook that lets us get data from our auth context\nexport function useStitchAuth() {\n\tconst context = React.useContext(StitchAuthContext);\n\tif (!context) {\n\t\tthrow new Error(`useStitchAuth must be used within a StitchAuthProvider`);\n\t}\n\treturn context;\n}\n\n// Create a component that controls auth state and exposes it via\n// the React Context we created.\nexport function StitchAuthProvider(props) {\n\tconst [authState, setAuthState] = React.useState({\n\t\tisLoggedIn: hasLoggedInUser(),\n\t\tcurrentUser: getCurrentUser(),\n\t});\n\n\t// Authentication Actions\n\tconst handleAnonymousLogin = async () => {\n\t\tconst { isLoggedIn } = authState;\n\t\tif (!isLoggedIn) {\n\t\t\ttry {\n\t\t\t\tconst loggedInUser = await loginAnonymous();\n\t\t\t\treturn setAuthState({\n\t\t\t\t\t...authState,\n\t\t\t\t\tisLoggedIn: true,\n\t\t\t\t\tcurrentUser: loggedInUser,\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\t};\n\tconst handleLogout = async () => {\n\t\tconst { isLoggedIn } = authState;\n\t\tif (isLoggedIn) {\n\t\t\tawait logoutCurrentUser();\n\t\t\tsetAuthState({\n\t\t\t\t...authState,\n\t\t\t\tisLoggedIn: false,\n\t\t\t\tcurrentUser: null,\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(`can't handleLogout when no user is logged in`);\n\t\t}\n\t};\n\n\t// We useMemo to improve performance by eliminating some re-renders\n\tconst authInfo = React.useMemo(() => {\n\t\tconst { isLoggedIn, currentUser } = authState;\n\t\tconst value = {\n\t\t\tisLoggedIn,\n\t\t\tcurrentUser,\n\t\t\tactions: { handleAnonymousLogin, handleLogout },\n\t\t};\n\t\treturn value;\n\t}, [authState, handleAnonymousLogin, handleLogout]);\n\treturn (\n\t\t<StitchAuthContext.Provider value={authInfo}>\n\t\t\t{props.children}\n\t\t</StitchAuthContext.Provider>\n\t);\n}\nStitchAuthProvider.propTypes = {\n\tchildren: PropTypes.element,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Post extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tclassName=\"bg-white ma3 box post flex flex-column no-underline br2\"\n\t\t\t\tto={`/post/${this.props.post._id}`}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"image\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundImage: `url(${this.props.post.imageUrl})`,\n\t\t\t\t\t\tbackgroundSize: 'cover',\n\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\tpaddingBottom: '100%',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<div className=\"flex items-center black-80 fw3 description\">\n\t\t\t\t\t{this.props.post.description}\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Post from './Post';\nimport { useStitchAuth } from '../stitch/StitchAuth';\n\nconst ListPage = props => {\n\tconst {\n\t\tisLoggedIn,\n\t\tactions: { handleLogout, handleAnonymousLogin },\n\t} = useStitchAuth();\n\n\tlet blurClass = '';\n\n\tif (props.location.pathname !== '/') {\n\t\tblurClass = ' blur';\n\t}\n\n\treturn (\n\t\t<div className={'w-100 flex justify-center pa6' + blurClass}>\n\t\t\t<div className=\"w-100 flex flex-wrap\" style={{ maxWidth: 1150 }}>\n\t\t\t\t{!isLoggedIn && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"ma3 box new-post br2 flex flex-column items-center justify-center ttu fw6 f20 black-30 no-underline\"\n\t\t\t\t\t\tonClick={handleAnonymousLogin}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={require('../assets/plus.svg')}\n\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\tclassName=\"plus mb3\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div>Log In as a Guest User</div>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t<Link\n\t\t\t\t\tto=\"/create\"\n\t\t\t\t\tclassName=\"ma3 box new-post br2 flex flex-column items-center justify-center ttu fw6 f20 black-30 no-underline\"\n\t\t\t\t>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={require('../assets/plus.svg')}\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\tclassName=\"plus mb3\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div>New Post</div>\n\t\t\t\t</Link>\n\n\t\t\t\t{props.instaposts &&\n\t\t\t\t\tprops.instaposts.map(post => (\n\t\t\t\t\t\t<Post\n\t\t\t\t\t\t\tkey={post.id}\n\t\t\t\t\t\t\tpost={post}\n\t\t\t\t\t\t\trefresh={() => props.instaposts.refetch()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\n\t\t\t\t{isLoggedIn && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"ma3 box new-post br2 flex flex-column items-center justify-center ttu fw6 f20 black-30 no-underline\"\n\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={require('../assets/plus.svg')}\n\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\tclassName=\"plus mb3\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div>Log Out</div>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default ListPage;\n","import React from 'react';\n\nconst Loading = () => {\n\treturn (\n\t\t<div className=\"flex w-100 h-100 items-center justify-center pt7\">\n\t\t\t<div>Loading data from the MongoDB GraphQL endpoint...</div>\n\t\t</div>\n\t);\n};\n\nexport default Loading;\n","import React, { Fragment } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport ListPage from './ListPage';\nimport Loading from './Loading';\n\nconst FIND_ALL_INSTAPOSTS = gql`\n\tquery {\n\t\tinstaposts {\n\t\t\t_id\n\t\t\tdescription\n\t\t\timageUrl\n\t\t}\n\t}\n`;\n\nfunction ListPageContainer(props) {\n\tconst { loading, error, data } = useQuery(FIND_ALL_INSTAPOSTS, {\n\t\tpollInterval: 500,\n\t});\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{loading && <Loading />}\n\t\t\t{error && <div>{`encountered an error: ${error}`}</div>}\n\t\t\t{data && <ListPage {...data} {...props} />}\n\t\t</Fragment>\n\t);\n}\n\nexport default ListPageContainer;\n","const modalStyle = {\n\toverlay: {\n\t\tzIndex: 20,\n\t\tbackgroundColor: 'rgba(255,255,255,.6)',\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tcontent: {\n\t\tposition: 'relative',\n\t\twidth: 600,\n\t\theight: 'auto',\n\t\ttop: 'initial',\n\t\tleft: 'initial',\n\t\tright: 'initial',\n\t\tbottom: 'initial',\n\t\tborderRadius: 2,\n\t\tpadding: 0,\n\t\tborder: 'none',\n\t\tbackground: 'none',\n\t\tboxShadow: '0 1px 7px rgba(0,0,0,.2)',\n\t},\n};\n\nexport default modalStyle;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Modal from 'react-modal';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport modalStyle from '../constants/modalStyle';\n\nconst ADD_INSTAPOST = gql`\n\tmutation CreatePostMutation($data: InstapostInsertInput!) {\n\t\tinsertOneInstapost(data: $data) {\n\t\t\t_id\n\t\t\tdescription\n\t\t\timageUrl\n\t\t}\n\t}\n`;\n\nfunction CreatePage(props) {\n\tlet imageUrl = { value: '' };\n\tlet description = '';\n\tconst [addPost] = useMutation(ADD_INSTAPOST);\n\n\treturn (\n\t\t<Modal\n\t\t\tisOpen\n\t\t\tcontentLabel=\"Create Post\"\n\t\t\tariaHideApp={false}\n\t\t\tstyle={modalStyle}\n\t\t\tonRequestClose={props.history.goBack}\n\t\t>\n\t\t\t<div className=\"pa4 flex justify-center bg-white\">\n\t\t\t\t<div style={{ maxWidth: 400 }} className=\"\">\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={e => {\n\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\taddPost({\n\t\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tdescription: description.value,\n\t\t\t\t\t\t\t\t\t\timageUrl: imageUrl.value,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tprops.history.replace('/');\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"w-100 pa3 mv2\"\n\t\t\t\t\t\t\tid=\"imageUrl\"\n\t\t\t\t\t\t\tref={url => {\n\t\t\t\t\t\t\t\timageUrl = url;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tplaceholder=\"Image Url\"\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"w-100 pa3 mv2\"\n\t\t\t\t\t\t\tid=\"description\"\n\t\t\t\t\t\t\tplaceholder=\"Description\"\n\t\t\t\t\t\t\tref={str => {\n\t\t\t\t\t\t\t\tdescription = str;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"pa3 bg-black-10 bn dim ttu pointer\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPost\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Modal>\n\t);\n}\n\nexport default withRouter(CreatePage);\n","import React from 'react';\nimport CreatePage from './CreatePage';\n\nconst CreatePageContainer = props => <CreatePage {...props} />;\n\nexport default CreatePageContainer;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Modal from 'react-modal';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport modalStyle from '../constants/modalStyle';\n\nconst detailModalStyle = {\n\toverlay: modalStyle.overlay,\n\tcontent: {\n\t\t...modalStyle.content,\n\t\theight: 761,\n\t},\n};\n\nconst DELETE_INSTAPOST = gql`\n\tmutation deleteOneInstapost($data: InstapostQueryInput!) {\n\t\tdeleteOneInstapost(query: $data) {\n\t\t\t_id\n\t\t\tdescription\n\t\t\timageUrl\n\t\t}\n\t}\n`;\n\nfunction DetailPage(props) {\n\tconst [deletePost] = useMutation(DELETE_INSTAPOST);\n\tconst { instapost } = props;\n\n\treturn (\n\t\t<Modal\n\t\t\tisOpen\n\t\t\tariaHideApp={false}\n\t\t\tcontentLabel=\"Create Post\"\n\t\t\tstyle={detailModalStyle}\n\t\t\tonRequestClose={props.history.goBack}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"close fixed right-0 top-0 pointer\"\n\t\t\t\tonClick={props.history.goBack}\n\t\t\t>\n\t\t\t\t<img src={require('../assets/close.svg')} alt=\"\" />\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"delete ttu white pointer fw6 absolute left-0 top-0 br2\"\n\t\t\t\tonClick={e => {\n\t\t\t\t\tdeletePost({\n\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t_id: instapost._id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tprops.history.replace('/');\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDelete\n\t\t\t</div>\n\t\t\t<div className=\"bg-white detail flex flex-column no-underline br2 h-100\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"image\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundImage: `url(${instapost.imageUrl})`,\n\t\t\t\t\t\tbackgroundSize: 'cover',\n\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\tpaddingBottom: '100%',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<div className=\"flex items-center black-80 fw3 description\">\n\t\t\t\t\t{instapost.description}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Modal>\n\t);\n}\n\nexport default withRouter(DetailPage);\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport DetailPage from './DetailPage';\nimport Loading from './Loading';\n\nfunction DetailPageContainer(props) {\n\tconst _id = props.match.params._id;\n\n\tconst { loading, error, data } = useQuery(\n\t\tgql`\n\t\t\tquery PostsQuery {\n\t\t\t\tinstapost {\n\t\t\t\t\t_id\n\t\t\t\t\timageUrl\n\t\t\t\t\tdescription\n\t\t\t\t}\n\t\t\t}\n\t\t`,\n\t\t{\n\t\t\tvariables: { _id },\n\t\t}\n\t);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{loading && <Loading />}\n\t\t\t{error && <div>{`encountered an error: ${error}`}</div>}\n\t\t\t{data && <DetailPage {...data} {...props} />}\n\t\t</div>\n\t);\n}\n\nexport default DetailPageContainer;\n","import { HttpLink, InMemoryCache, ApolloClient } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport {\n\tgetCurrentUser,\n\thasLoggedInUser,\n\tloginAnonymous,\n} from './authentication';\nimport CONFIG from '../config';\n\nconst initGraphQLClient = () => {\n\thasLoggedInUser();\n\tif (!hasLoggedInUser()) {\n\t\tloginAnonymous();\n\t}\n\n\tif (hasLoggedInUser()) {\n\t\tconst accessToken = getCurrentUser().auth.activeUserAuthInfo.accessToken;\n\n\t\t// Add an Authorization header to each GraphQL request\n\t\tconst authLink = setContext((_, { headers }) => ({\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t},\n\t\t}));\n\n\t\t// Connect Apollo to the GraphQL Endpoint\n\t\tconst GRAPHQL_URL = `https://stitch.mongodb.com/api/client/v2.0/app/${CONFIG.APP_ID}/graphql`;\n\t\tconst httpLink = new HttpLink({ uri: GRAPHQL_URL });\n\n\t\t// Instantiate the Apollo Client\n\t\tconst client = new ApolloClient({\n\t\t\tlink: authLink.concat(httpLink),\n\t\t\tcache: new InMemoryCache(),\n\t\t});\n\n\t\treturn client;\n\t}\n};\n\nexport default initGraphQLClient;\n","import React, { Fragment } from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ListPage from './ListPageContainer';\nimport CreatePage from './CreatePageContainer';\nimport DetailPage from './DetailPageContainer';\nimport { useStitchAuth, initGraphQLClient } from '../stitch';\n\nfunction Login() {\n\tconst { actions } = useStitchAuth();\n\n\treturn (\n\t\t<button onClick={actions.handleAnonymousLogin}>\n\t\t\tLog In as a Guest User\n\t\t</button>\n\t);\n}\n\nfunction InstaPostApp() {\n\tconst client = initGraphQLClient();\n\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<Route exact path=\"/\" component={ListPage} />\n\t\t\t\t\t<Route path=\"/post/:id\" component={DetailPage} />\n\t\t\t\t\t<Route path=\"/create\" component={CreatePage} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ApolloProvider>\n\t);\n}\n\nfunction App() {\n\tconst {\n\t\tisLoggedIn,\n\t\tactions: { handleAnonymousLogin },\n\t} = useStitchAuth();\n\n\thandleAnonymousLogin();\n\n\treturn <Fragment>{isLoggedIn ? <InstaPostApp /> : <Login />}</Fragment>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StitchAuthProvider } from './stitch/StitchAuth';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport 'tachyons';\nimport './index.css';\n\nReactDOM.render(\n\t<StitchAuthProvider>\n\t\t<App />\n\t</StitchAuthProvider>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}